#include <Adafruit_ST7735.h>

// Define pins for LCD
#define TFT_CS 10
#define TFT_RST 8
#define TFT_DC 9

// init pins for LCD
Adafruit_ST7735 tft = Adafruit_ST7735(TFT_CS, TFT_DC, TFT_RST);

// Set up Joystick
float stickY = 0;

// Color definitions
#define BLACK 0x0000
#define BLUE 0x001F
#define RED 0xF800
#define GREEN 0x07E0
#define CYAN 0x07FF
#define MAGENTA 0xF81F
#define YELLOW 0xFFE0
#define WHITE 0xFFFF

//  Define const for game physics
const unsigned long PADDLE_RATE = 33;
const unsigned long BALL_RATE = 20;
const uint8_t PADDLE_HEIGHT = 50;
int MAX_SCORE = 10;

// init scores
int CPU_SCORE = 0;
int PLAYER_SCORE = 0;

// init Ball
uint8_t ball_x = 64, ball_y = 32;
uint8_t ball_dir_x = 1, ball_dir_y = 1;

// init game states
boolean gameIsRunning = true;
boolean resetBall = false;

// ???
static const unsigned char pong[] PROGMEM = {
    0xff, 0xe0, 0x0, 0x3f, 0x80, 0x7, 0xe0, 0x7, 0xc0, 0x3, 0xfc, 0x0,
    0xff, 0xf8, 0x1, 0xff, 0xe0, 0x7, 0xf0, 0x7, 0xc0, 0x1f, 0xff, 0x0,
    0xff, 0xfc, 0x3, 0xff, 0xf0, 0x7, 0xf0, 0x7, 0xc0, 0x3f, 0xff, 0x0,
    0xff, 0xfe, 0x7, 0xff, 0xf8, 0x7, 0xf8, 0x7, 0xc0, 0xff, 0xff, 0x0,
    0xf8, 0x7f, 0xf, 0xff, 0xfc, 0x7, 0xfc, 0x7, 0xc0, 0xff, 0xff, 0x0,
    0xf8, 0x3f, 0xf, 0xe0, 0xfe, 0x7, 0xfc, 0x7, 0xc1, 0xfc, 0x7, 0x0,
    0xf8, 0x1f, 0x1f, 0x80, 0x7e, 0x7, 0xfe, 0x7, 0xc3, 0xf8, 0x1, 0x0,
    0xf8, 0x1f, 0x1f, 0x0, 0x3e, 0x7, 0xfe, 0x7, 0xc3, 0xf0, 0x0, 0x0,
    0xf8, 0x1f, 0x3f, 0x0, 0x3f, 0x7, 0xdf, 0x7, 0xc7, 0xe0, 0x0, 0x0,
    0xf8, 0x1f, 0x3e, 0x0, 0x1f, 0x7, 0xdf, 0x87, 0xc7, 0xc0, 0x0, 0x0,
    0xf8, 0x3f, 0x3e, 0x0, 0x1f, 0x7, 0xcf, 0x87, 0xc7, 0xc1, 0xff, 0x80,
    0xf8, 0x7e, 0x3e, 0x0, 0x1f, 0x7, 0xc7, 0xc7, 0xc7, 0xc1, 0xff, 0x80,
    0xff, 0xfe, 0x3e, 0x0, 0x1f, 0x7, 0xc7, 0xe7, 0xc7, 0xc1, 0xff, 0x80,
    0xff, 0xfc, 0x3e, 0x0, 0x1f, 0x7, 0xc3, 0xe7, 0xc7, 0xc1, 0xff, 0x80,
    0xff, 0xf8, 0x3e, 0x0, 0x1f, 0x7, 0xc1, 0xf7, 0xc7, 0xc0, 0xf, 0x80,
    0xff, 0xe0, 0x3f, 0x0, 0x3f, 0x7, 0xc1, 0xf7, 0xc7, 0xe0, 0xf, 0x80,
    0xf8, 0x0, 0x1f, 0x0, 0x3e, 0x7, 0xc0, 0xff, 0xc3, 0xe0, 0xf, 0x80,
    0xf8, 0x0, 0x1f, 0x80, 0x7e, 0x7, 0xc0, 0x7f, 0xc3, 0xf0, 0xf, 0x80,
    0xf8, 0x0, 0x1f, 0xc0, 0xfc, 0x7, 0xc0, 0x7f, 0xc3, 0xfc, 0xf, 0x80,
    0xf8, 0x0, 0xf, 0xff, 0xfc, 0x7, 0xc0, 0x3f, 0xc1, 0xff, 0xff, 0x80,
    0xf8, 0x0, 0x7, 0xff, 0xf8, 0x7, 0xc0, 0x3f, 0xc0, 0xff, 0xff, 0x80,
    0xf8, 0x0, 0x3, 0xff, 0xf0, 0x7, 0xc0, 0x1f, 0xc0, 0x7f, 0xff, 0x80,
    0xf8, 0x0, 0x1, 0xff, 0xe0, 0x7, 0xc0, 0xf, 0xc0, 0x3f, 0xff, 0x0,
    0xf8, 0x0, 0x0, 0x7f, 0x0, 0x7, 0xc0, 0xf, 0xc0, 0x7, 0xf8, 0x0};

// ???
static const unsigned char game[] PROGMEM = {
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xff, 0x80,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc3, 0xff, 0x80,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf, 0xc3, 0xff, 0x80,
    0x0, 0x0, 0x0, 0x0, 0x3, 0xe0, 0xf, 0xc3, 0xe0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x7, 0xf0, 0x1f, 0xc1, 0xe0, 0x0,
    0x0, 0x0, 0x0, 0xf8, 0x7, 0xf0, 0x1f, 0xc1, 0xe0, 0x0,
    0x0, 0xfc, 0x1, 0xfc, 0x7, 0xf8, 0x1f, 0xc1, 0xe0, 0x0,
    0x7, 0xfc, 0x1, 0xfc, 0x3, 0xf8, 0x1f, 0xe1, 0xff, 0x80,
    0x1f, 0xfc, 0x1, 0xde, 0x3, 0xbc, 0x3d, 0xe1, 0xff, 0x80,
    0x3f, 0xfe, 0x1, 0xde, 0x3, 0xbc, 0x39, 0xe1, 0xff, 0x80,
    0x7e, 0x0, 0x3, 0xdf, 0x3, 0xde, 0x39, 0xe1, 0xfc, 0x0,
    0x7c, 0x0, 0x3, 0xcf, 0x3, 0xde, 0x39, 0xe1, 0xe0, 0x0,
    0xf8, 0x0, 0x3, 0xcf, 0x3, 0xcf, 0x39, 0xe1, 0xf0, 0x0,
    0xf8, 0x0, 0x3, 0x87, 0x83, 0xcf, 0x79, 0xe0, 0xf0, 0x0,
    0xf0, 0x7f, 0x7, 0x87, 0x83, 0xc7, 0xf1, 0xe0, 0xf0, 0xe0,
    0xf0, 0xff, 0x7, 0x83, 0xc3, 0xc7, 0xf1, 0xe0, 0xff, 0xe0,
    0xf0, 0xff, 0x7, 0xff, 0xc1, 0xc3, 0xf1, 0xf0, 0xff, 0xe0,
    0xf0, 0xff, 0x7, 0xff, 0xe1, 0xc3, 0xf0, 0xf0, 0xff, 0xe0,
    0xf8, 0xf, 0xf, 0xff, 0xe1, 0xc1, 0xe0, 0xf0, 0xe0, 0x0,
    0xf8, 0xf, 0x8f, 0x1, 0xf1, 0xe1, 0xe0, 0xf0, 0x0, 0x0,
    0x7c, 0xf, 0x8f, 0x0, 0xf1, 0xe1, 0xe0, 0x0, 0x0, 0x0,
    0x7f, 0x1f, 0x8f, 0x0, 0xf9, 0xc0, 0x0, 0x0, 0x0, 0x0,
    0x3f, 0xff, 0x9f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x1f, 0xff, 0x1f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x7, 0xfc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};

// ???
unsigned long ball_update;
unsigned long paddle_update;

const uint8_t CPU_X = 12;
uint8_t cpu_y = 16;

const uint8_t PLAYER_X = 85;
uint8_t player_y = 16;

void setup()
{

  // Set up Joystick
  pinMode(A0, INPUT);

  // init LCD
  tft.initR(INITR_BLACKTAB);

    tft.setRotation(1);

  // Init screen
  tft.fillScreen(BLACK);
  tft.drawBitmap(3, 0, pong, 89, 24, GREEN);
  tft.drawBitmap(10, 30, game, 75, 26, RED);
  // wait for game to start
  while (readStick() > 400 && readStick() < 600)
  {
    delay(100);
  }
  unsigned long start = millis();

  // black screen
  tft.fillScreen(BLACK);
  // draw court
  drawCourt();

  // start ball in rand location
  while (millis() - start < 2000)
    ;
  ball_update = millis();
  paddle_update = ball_update;
  ball_x = random(25, 135);
  ball_y = random(3, 125);
}

void loop()
{

  // clear last movement
  unsigned long time = millis();
  static bool up_state = false;
  static bool down_state = false;

  // read joystick
  up_state |= (readStick() < 400);
  down_state |= (readStick() > 600);

  if (resetBall)
  {
    ball_x = random(25, 135);
    ball_y = random(3, 125);
    do
    {
      ball_dir_x = random(-1, 2);
    } while (ball_dir_x == 0);

    do
    {
      ball_dir_y = random(-1, 2);
    } while (ball_dir_y == 0);

    resetBall = false;
  }

  if (time > ball_update && gameIsRunning)
  {
    uint8_t new_x = ball_x + ball_dir_x;
    uint8_t new_y = ball_y + ball_dir_y;

    // Check if we hit the vertical walls
    if (new_x == 0) //Player Gets a Point
    {
      PLAYER_SCORE++;
      if (PLAYER_SCORE == MAX_SCORE)
      {
        gameOver();
      }
      else
      {
        showScore();
      }
    }

    // Check if we hit the vertical walls
    if (new_x == 160) //CPU Gets a Point
    {
      CPU_SCORE++;
      if (CPU_SCORE == MAX_SCORE)
      {
        gameOver();
      }
      else
      {
        showScore();
      }
    }

    // Check if we hit the horizontal walls.
    if (new_y == 0 || new_y == 128)
    {
      ball_dir_y = -ball_dir_y;
      new_y += ball_dir_y + ball_dir_y;
    }

    // Check if we hit the CPU paddle
    if (new_x == CPU_X && new_y >= cpu_y && new_y <= cpu_y + PADDLE_HEIGHT)
    {
      ball_dir_x = -ball_dir_x;
      new_x += ball_dir_x + ball_dir_x;
    }

    // Check if we hit the player paddle
    if (new_x == PLAYER_X && new_y >= player_y && new_y <= player_y + PADDLE_HEIGHT)
    {
      ball_dir_x = -ball_dir_x;
      new_x += ball_dir_x + ball_dir_x;
    }

    tft.drawPixel(ball_x, ball_y, BLACK);
    tft.drawPixel(new_x, new_y, WHITE);
    ball_x = new_x;
    ball_y = new_y;

    ball_update += BALL_RATE;
  }

  if (time > paddle_update && gameIsRunning)
  {
    paddle_update += PADDLE_RATE;

    // CPU paddle
    tft.drawFastVLine(CPU_X, cpu_y, PADDLE_HEIGHT, BLACK);
    const uint8_t half_paddle = PADDLE_HEIGHT >> 1;
    if (cpu_y + half_paddle > ball_y)
    {
      cpu_y -= 1;
    }
    if (cpu_y + half_paddle < ball_y)
    {
      cpu_y += 1;
    }
    if (cpu_y < 1)
      cpu_y = 1;
    if (cpu_y + PADDLE_HEIGHT > 63)
      cpu_y = 63 - PADDLE_HEIGHT;
    tft.drawFastVLine(CPU_X, cpu_y, PADDLE_HEIGHT, RED);

    // Player paddle
    tft.drawFastVLine(PLAYER_X, player_y, PADDLE_HEIGHT, BLACK);
    if (up_state)
    {
      player_y -= 1;
    }
    if (down_state)
    {
      player_y += 1;
    }
    up_state = down_state = false;
    if (player_y < 1)
      player_y = 1;
    if (player_y + PADDLE_HEIGHT > 63)
      player_y = 63 - PADDLE_HEIGHT;
    tft.drawFastVLine(PLAYER_X, player_y, PADDLE_HEIGHT, GREEN);
  }
}


void drawCourt()
{
  tft.drawRect(0, 0, 160, 128, WHITE);
}

void gameOver()
{
  gameIsRunning = false;
  tft.fillScreen(BLACK);
  drawCourt();
  if (PLAYER_SCORE > CPU_SCORE)
  {
    tft.setCursor(5, 4);
    tft.setTextColor(WHITE);
    tft.setTextSize(2);
    tft.print("You Won");
  }
  else
  {
    tft.setCursor(5, 4);
    tft.setTextColor(WHITE);
    tft.setTextSize(2);
    tft.print("CPU WON");
  }

  tft.setCursor(20, 30);
  tft.setTextColor(RED);
  tft.setTextSize(3);
  tft.print(String(CPU_SCORE));

  tft.setCursor(60, 30);
  tft.setTextColor(GREEN);
  tft.setTextSize(3);
  tft.print(String(PLAYER_SCORE));

  delay(2000);

  while (readStick() > 400 && readStick() < 600)
  {
    delay(100);
  }
  gameIsRunning = true;

  CPU_SCORE = PLAYER_SCORE = 0;

  unsigned long start = millis();
  tft.fillScreen(BLACK);
  drawCourt();
  while (millis() - start < 2000)
    ;
  ball_update = millis();
  paddle_update = ball_update;
  gameIsRunning = true;
  resetBall = true;
}

void showScore()
{
  gameIsRunning = false;
  tft.fillScreen(BLACK);
  drawCourt();

  tft.setCursor(32, 4);
  tft.setTextColor(WHITE);
  tft.setTextSize(3);
  tft.print("Score");

  tft.setCursor(40, 30);
  tft.setTextColor(RED);
  tft.setTextSize(4);
  tft.print(String(CPU_SCORE));

  tft.setCursor(80, 30);
  tft.setTextColor(GREEN);
  tft.setTextSize(4);
  tft.print(String(PLAYER_SCORE));

  delay(2000);
  unsigned long start = millis();

  tft.fillScreen(BLACK);
  drawCourt();
  while (millis() - start < 2000)
    ;
  ball_update = millis();
  paddle_update = ball_update;
  gameIsRunning = true;
  resetBall = true;
}

float readStick()
{
  return analogRead(A0);
}
